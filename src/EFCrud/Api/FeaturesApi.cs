/*
 * EmployeeEFCrud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EFCrud.Client;

namespace EFCrud.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeaturesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isdeleted"> (optional)</param>
        /// <param name="isactive"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiFeaturesIdDelete(int id, bool? isdeleted = default(bool?), bool? isactive = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isdeleted"> (optional)</param>
        /// <param name="isactive"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiFeaturesIdDeleteWithHttpInfo(int id, bool? isdeleted = default(bool?), bool? isactive = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isman"> (optional)</param>
        /// <param name="issup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiFeaturesIdPut(int id, bool? isman = default(bool?), bool? issup = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isman"> (optional)</param>
        /// <param name="issup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiFeaturesIdPutWithHttpInfo(int id, bool? isman = default(bool?), bool? issup = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeaturesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isdeleted"> (optional)</param>
        /// <param name="isactive"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiFeaturesIdDeleteAsync(int id, bool? isdeleted = default(bool?), bool? isactive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isdeleted"> (optional)</param>
        /// <param name="isactive"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiFeaturesIdDeleteWithHttpInfoAsync(int id, bool? isdeleted = default(bool?), bool? isactive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isman"> (optional)</param>
        /// <param name="issup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiFeaturesIdPutAsync(int id, bool? isman = default(bool?), bool? issup = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isman"> (optional)</param>
        /// <param name="issup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiFeaturesIdPutWithHttpInfoAsync(int id, bool? isman = default(bool?), bool? issup = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeaturesApi : IFeaturesApiSync, IFeaturesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeaturesApi : IFeaturesApi
    {
        private EFCrud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeaturesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeaturesApi(string basePath)
        {
            this.Configuration = EFCrud.Client.Configuration.MergeConfigurations(
                EFCrud.Client.GlobalConfiguration.Instance,
                new EFCrud.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EFCrud.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EFCrud.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EFCrud.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeaturesApi(EFCrud.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EFCrud.Client.Configuration.MergeConfigurations(
                EFCrud.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EFCrud.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EFCrud.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EFCrud.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FeaturesApi(EFCrud.Client.ISynchronousClient client, EFCrud.Client.IAsynchronousClient asyncClient, EFCrud.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EFCrud.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EFCrud.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EFCrud.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EFCrud.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EFCrud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isdeleted"> (optional)</param>
        /// <param name="isactive"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiFeaturesIdDelete(int id, bool? isdeleted = default(bool?), bool? isactive = default(bool?), int operationIndex = 0)
        {
            ApiFeaturesIdDeleteWithHttpInfo(id, isdeleted, isactive);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isdeleted"> (optional)</param>
        /// <param name="isactive"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EFCrud.Client.ApiResponse<Object> ApiFeaturesIdDeleteWithHttpInfo(int id, bool? isdeleted = default(bool?), bool? isactive = default(bool?), int operationIndex = 0)
        {
            EFCrud.Client.RequestOptions localVarRequestOptions = new EFCrud.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EFCrud.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EFCrud.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EFCrud.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isdeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(EFCrud.Client.ClientUtils.ParameterToMultiMap("", "isdeleted", isdeleted));
            }
            if (isactive != null)
            {
                localVarRequestOptions.QueryParameters.Add(EFCrud.Client.ClientUtils.ParameterToMultiMap("", "isactive", isactive));
            }

            localVarRequestOptions.Operation = "FeaturesApi.ApiFeaturesIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/Features/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiFeaturesIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isdeleted"> (optional)</param>
        /// <param name="isactive"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiFeaturesIdDeleteAsync(int id, bool? isdeleted = default(bool?), bool? isactive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiFeaturesIdDeleteWithHttpInfoAsync(id, isdeleted, isactive, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isdeleted"> (optional)</param>
        /// <param name="isactive"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EFCrud.Client.ApiResponse<Object>> ApiFeaturesIdDeleteWithHttpInfoAsync(int id, bool? isdeleted = default(bool?), bool? isactive = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EFCrud.Client.RequestOptions localVarRequestOptions = new EFCrud.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EFCrud.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EFCrud.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EFCrud.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isdeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(EFCrud.Client.ClientUtils.ParameterToMultiMap("", "isdeleted", isdeleted));
            }
            if (isactive != null)
            {
                localVarRequestOptions.QueryParameters.Add(EFCrud.Client.ClientUtils.ParameterToMultiMap("", "isactive", isactive));
            }

            localVarRequestOptions.Operation = "FeaturesApi.ApiFeaturesIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/Features/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiFeaturesIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isman"> (optional)</param>
        /// <param name="issup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiFeaturesIdPut(int id, bool? isman = default(bool?), bool? issup = default(bool?), int operationIndex = 0)
        {
            ApiFeaturesIdPutWithHttpInfo(id, isman, issup);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isman"> (optional)</param>
        /// <param name="issup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EFCrud.Client.ApiResponse<Object> ApiFeaturesIdPutWithHttpInfo(int id, bool? isman = default(bool?), bool? issup = default(bool?), int operationIndex = 0)
        {
            EFCrud.Client.RequestOptions localVarRequestOptions = new EFCrud.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EFCrud.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EFCrud.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EFCrud.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isman != null)
            {
                localVarRequestOptions.QueryParameters.Add(EFCrud.Client.ClientUtils.ParameterToMultiMap("", "isman", isman));
            }
            if (issup != null)
            {
                localVarRequestOptions.QueryParameters.Add(EFCrud.Client.ClientUtils.ParameterToMultiMap("", "issup", issup));
            }

            localVarRequestOptions.Operation = "FeaturesApi.ApiFeaturesIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/Features/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiFeaturesIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isman"> (optional)</param>
        /// <param name="issup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiFeaturesIdPutAsync(int id, bool? isman = default(bool?), bool? issup = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiFeaturesIdPutWithHttpInfoAsync(id, isman, issup, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="isman"> (optional)</param>
        /// <param name="issup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EFCrud.Client.ApiResponse<Object>> ApiFeaturesIdPutWithHttpInfoAsync(int id, bool? isman = default(bool?), bool? issup = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EFCrud.Client.RequestOptions localVarRequestOptions = new EFCrud.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EFCrud.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EFCrud.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EFCrud.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (isman != null)
            {
                localVarRequestOptions.QueryParameters.Add(EFCrud.Client.ClientUtils.ParameterToMultiMap("", "isman", isman));
            }
            if (issup != null)
            {
                localVarRequestOptions.QueryParameters.Add(EFCrud.Client.ClientUtils.ParameterToMultiMap("", "issup", issup));
            }

            localVarRequestOptions.Operation = "FeaturesApi.ApiFeaturesIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/Features/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiFeaturesIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
