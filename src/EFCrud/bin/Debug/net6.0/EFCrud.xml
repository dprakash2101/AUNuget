<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EFCrud</name>
    </assembly>
    <members>
        <member name="T:EFCrud.Api.IAuthApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:EFCrud.Api.IAuthApiSync.ApiAuthLoginPost(EFCrud.Model.Userdto,System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>User</returns>
        </member>
        <member name="M:EFCrud.Api.IAuthApiSync.ApiAuthLoginPostWithHttpInfo(EFCrud.Model.Userdto,System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of User</returns>
        </member>
        <member name="M:EFCrud.Api.IAuthApiSync.ApiAuthRegisterPost(System.String,EFCrud.Model.Userdto,System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="role"> (optional)</param>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>User</returns>
        </member>
        <member name="M:EFCrud.Api.IAuthApiSync.ApiAuthRegisterPostWithHttpInfo(System.String,EFCrud.Model.Userdto,System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="role"> (optional)</param>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of User</returns>
        </member>
        <member name="T:EFCrud.Api.IAuthApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:EFCrud.Api.IAuthApiAsync.ApiAuthLoginPostAsync(EFCrud.Model.Userdto,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of User</returns>
        </member>
        <member name="M:EFCrud.Api.IAuthApiAsync.ApiAuthLoginPostWithHttpInfoAsync(EFCrud.Model.Userdto,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (User)</returns>
        </member>
        <member name="M:EFCrud.Api.IAuthApiAsync.ApiAuthRegisterPostAsync(System.String,EFCrud.Model.Userdto,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="role"> (optional)</param>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of User</returns>
        </member>
        <member name="M:EFCrud.Api.IAuthApiAsync.ApiAuthRegisterPostWithHttpInfoAsync(System.String,EFCrud.Model.Userdto,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="role"> (optional)</param>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (User)</returns>
        </member>
        <member name="T:EFCrud.Api.IAuthApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:EFCrud.Api.AuthApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:EFCrud.Api.AuthApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.AuthApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.AuthApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.AuthApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.AuthApi.#ctor(EFCrud.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.AuthApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.AuthApi.#ctor(EFCrud.Client.ISynchronousClient,EFCrud.Client.IAsynchronousClient,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.AuthApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:EFCrud.Api.AuthApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:EFCrud.Api.AuthApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:EFCrud.Api.AuthApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:EFCrud.Api.AuthApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:EFCrud.Api.AuthApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:EFCrud.Api.AuthApi.ApiAuthLoginPost(EFCrud.Model.Userdto,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>User</returns>
        </member>
        <member name="M:EFCrud.Api.AuthApi.ApiAuthLoginPostWithHttpInfo(EFCrud.Model.Userdto,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of User</returns>
        </member>
        <member name="M:EFCrud.Api.AuthApi.ApiAuthLoginPostAsync(EFCrud.Model.Userdto,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of User</returns>
        </member>
        <member name="M:EFCrud.Api.AuthApi.ApiAuthLoginPostWithHttpInfoAsync(EFCrud.Model.Userdto,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (User)</returns>
        </member>
        <member name="M:EFCrud.Api.AuthApi.ApiAuthRegisterPost(System.String,EFCrud.Model.Userdto,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="role"> (optional)</param>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>User</returns>
        </member>
        <member name="M:EFCrud.Api.AuthApi.ApiAuthRegisterPostWithHttpInfo(System.String,EFCrud.Model.Userdto,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="role"> (optional)</param>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of User</returns>
        </member>
        <member name="M:EFCrud.Api.AuthApi.ApiAuthRegisterPostAsync(System.String,EFCrud.Model.Userdto,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="role"> (optional)</param>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of User</returns>
        </member>
        <member name="M:EFCrud.Api.AuthApi.ApiAuthRegisterPostWithHttpInfoAsync(System.String,EFCrud.Model.Userdto,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="role"> (optional)</param>
            <param name="userdto"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (User)</returns>
        </member>
        <member name="T:EFCrud.Api.IEmployeesApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiSync.ApiEmployeesGet(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>List&lt;Employee&gt;</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiSync.ApiEmployeesGetWithHttpInfo(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of List&lt;Employee&gt;</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiSync.ApiEmployeesIdDelete(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiSync.ApiEmployeesIdDeleteWithHttpInfo(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiSync.ApiEmployeesIdGet(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>Employee</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiSync.ApiEmployeesIdGetWithHttpInfo(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Employee</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiSync.ApiEmployeesIdPut(System.Int32,EFCrud.Model.Employee,System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiSync.ApiEmployeesIdPutWithHttpInfo(System.Int32,EFCrud.Model.Employee,System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiSync.ApiEmployeesPost(EFCrud.Model.Employee,System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>Employee</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiSync.ApiEmployeesPostWithHttpInfo(EFCrud.Model.Employee,System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Employee</returns>
        </member>
        <member name="T:EFCrud.Api.IEmployeesApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiAsync.ApiEmployeesGetAsync(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Employee&gt;</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiAsync.ApiEmployeesGetWithHttpInfoAsync(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Employee&gt;)</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiAsync.ApiEmployeesIdDeleteAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiAsync.ApiEmployeesIdDeleteWithHttpInfoAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiAsync.ApiEmployeesIdGetAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Employee</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiAsync.ApiEmployeesIdGetWithHttpInfoAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Employee)</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiAsync.ApiEmployeesIdPutAsync(System.Int32,EFCrud.Model.Employee,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiAsync.ApiEmployeesIdPutWithHttpInfoAsync(System.Int32,EFCrud.Model.Employee,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiAsync.ApiEmployeesPostAsync(EFCrud.Model.Employee,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Employee</returns>
        </member>
        <member name="M:EFCrud.Api.IEmployeesApiAsync.ApiEmployeesPostWithHttpInfoAsync(EFCrud.Model.Employee,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Employee)</returns>
        </member>
        <member name="T:EFCrud.Api.IEmployeesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:EFCrud.Api.EmployeesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.EmployeesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.EmployeesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.#ctor(EFCrud.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.EmployeesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.#ctor(EFCrud.Client.ISynchronousClient,EFCrud.Client.IAsynchronousClient,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.EmployeesApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:EFCrud.Api.EmployeesApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:EFCrud.Api.EmployeesApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:EFCrud.Api.EmployeesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:EFCrud.Api.EmployeesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesGet(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>List&lt;Employee&gt;</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesGetWithHttpInfo(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of List&lt;Employee&gt;</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesGetAsync(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of List&lt;Employee&gt;</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesGetWithHttpInfoAsync(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (List&lt;Employee&gt;)</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesIdDelete(System.Int32,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesIdDeleteWithHttpInfo(System.Int32,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesIdDeleteAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesIdDeleteWithHttpInfoAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesIdGet(System.Int32,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>Employee</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesIdGetWithHttpInfo(System.Int32,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Employee</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesIdGetAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Employee</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesIdGetWithHttpInfoAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Employee)</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesIdPut(System.Int32,EFCrud.Model.Employee,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesIdPutWithHttpInfo(System.Int32,EFCrud.Model.Employee,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesIdPutAsync(System.Int32,EFCrud.Model.Employee,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesIdPutWithHttpInfoAsync(System.Int32,EFCrud.Model.Employee,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesPost(EFCrud.Model.Employee,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>Employee</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesPostWithHttpInfo(EFCrud.Model.Employee,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Employee</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesPostAsync(EFCrud.Model.Employee,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of Employee</returns>
        </member>
        <member name="M:EFCrud.Api.EmployeesApi.ApiEmployeesPostWithHttpInfoAsync(EFCrud.Model.Employee,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="employee"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse (Employee)</returns>
        </member>
        <member name="T:EFCrud.Api.IFeaturesApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:EFCrud.Api.IFeaturesApiSync.ApiFeaturesIdDelete(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isdeleted"> (optional)</param>
            <param name="isactive"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.IFeaturesApiSync.ApiFeaturesIdDeleteWithHttpInfo(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isdeleted"> (optional)</param>
            <param name="isactive"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.IFeaturesApiSync.ApiFeaturesIdPut(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isman"> (optional)</param>
            <param name="issup"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.IFeaturesApiSync.ApiFeaturesIdPutWithHttpInfo(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isman"> (optional)</param>
            <param name="issup"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="T:EFCrud.Api.IFeaturesApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:EFCrud.Api.IFeaturesApiAsync.ApiFeaturesIdDeleteAsync(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isdeleted"> (optional)</param>
            <param name="isactive"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.IFeaturesApiAsync.ApiFeaturesIdDeleteWithHttpInfoAsync(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isdeleted"> (optional)</param>
            <param name="isactive"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.IFeaturesApiAsync.ApiFeaturesIdPutAsync(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isman"> (optional)</param>
            <param name="issup"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.IFeaturesApiAsync.ApiFeaturesIdPutWithHttpInfoAsync(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isman"> (optional)</param>
            <param name="issup"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="T:EFCrud.Api.IFeaturesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:EFCrud.Api.FeaturesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.FeaturesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.FeaturesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.#ctor(EFCrud.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.FeaturesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.#ctor(EFCrud.Client.ISynchronousClient,EFCrud.Client.IAsynchronousClient,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.FeaturesApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:EFCrud.Api.FeaturesApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:EFCrud.Api.FeaturesApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:EFCrud.Api.FeaturesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:EFCrud.Api.FeaturesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.ApiFeaturesIdDelete(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isdeleted"> (optional)</param>
            <param name="isactive"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.ApiFeaturesIdDeleteWithHttpInfo(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isdeleted"> (optional)</param>
            <param name="isactive"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.ApiFeaturesIdDeleteAsync(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isdeleted"> (optional)</param>
            <param name="isactive"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.ApiFeaturesIdDeleteWithHttpInfoAsync(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isdeleted"> (optional)</param>
            <param name="isactive"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.ApiFeaturesIdPut(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isman"> (optional)</param>
            <param name="issup"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.ApiFeaturesIdPutWithHttpInfo(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isman"> (optional)</param>
            <param name="issup"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.ApiFeaturesIdPutAsync(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isman"> (optional)</param>
            <param name="issup"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.FeaturesApi.ApiFeaturesIdPutWithHttpInfoAsync(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="id"></param>
            <param name="isman"> (optional)</param>
            <param name="issup"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="T:EFCrud.Api.IRolesApiSync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:EFCrud.Api.IRolesApiSync.ApiRolesAddEmployeeRolePost(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiSync.ApiRolesAddEmployeeRolePostWithHttpInfo(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiSync.ApiRolesAddRolesPost(EFCrud.Model.Roles,System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roles"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiSync.ApiRolesAddRolesPostWithHttpInfo(EFCrud.Model.Roles,System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roles"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiSync.ApiRolesDeleteEmpRoleDelete(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiSync.ApiRolesDeleteEmpRoleDeleteWithHttpInfo(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiSync.ApiRolesShowEmployeeRolesGet(System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiSync.ApiRolesShowEmployeeRolesGetWithHttpInfo(System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiSync.ApiRolesShowRolesGet(System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiSync.ApiRolesShowRolesGetWithHttpInfo(System.Int32)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="T:EFCrud.Api.IRolesApiAsync">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:EFCrud.Api.IRolesApiAsync.ApiRolesAddEmployeeRolePostAsync(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiAsync.ApiRolesAddEmployeeRolePostWithHttpInfoAsync(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiAsync.ApiRolesAddRolesPostAsync(EFCrud.Model.Roles,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roles"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiAsync.ApiRolesAddRolesPostWithHttpInfoAsync(EFCrud.Model.Roles,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roles"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiAsync.ApiRolesDeleteEmpRoleDeleteAsync(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiAsync.ApiRolesDeleteEmpRoleDeleteWithHttpInfoAsync(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiAsync.ApiRolesShowEmployeeRolesGetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiAsync.ApiRolesShowEmployeeRolesGetWithHttpInfoAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiAsync.ApiRolesShowRolesGetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.IRolesApiAsync.ApiRolesShowRolesGetWithHttpInfoAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="T:EFCrud.Api.IRolesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="T:EFCrud.Api.RolesApi">
            <summary>
            Represents a collection of functions to interact with the API endpoints
            </summary>
        </member>
        <member name="M:EFCrud.Api.RolesApi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.RolesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.RolesApi"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.#ctor(EFCrud.Client.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.RolesApi"/> class
            using Configuration object
            </summary>
            <param name="configuration">An instance of Configuration</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.#ctor(EFCrud.Client.ISynchronousClient,EFCrud.Client.IAsynchronousClient,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Api.RolesApi"/> class
            using a Configuration object and client instance.
            </summary>
            <param name="client">The client interface for synchronous API access.</param>
            <param name="asyncClient">The client interface for asynchronous API access.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="P:EFCrud.Api.RolesApi.AsynchronousClient">
            <summary>
            The client for accessing this underlying API asynchronously.
            </summary>
        </member>
        <member name="P:EFCrud.Api.RolesApi.Client">
            <summary>
            The client for accessing this underlying API synchronously.
            </summary>
        </member>
        <member name="M:EFCrud.Api.RolesApi.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:EFCrud.Api.RolesApi.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="P:EFCrud.Api.RolesApi.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesAddEmployeeRolePost(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesAddEmployeeRolePostWithHttpInfo(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesAddEmployeeRolePostAsync(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesAddEmployeeRolePostWithHttpInfoAsync(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesAddRolesPost(EFCrud.Model.Roles,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roles"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesAddRolesPostWithHttpInfo(EFCrud.Model.Roles,System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roles"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesAddRolesPostAsync(EFCrud.Model.Roles,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roles"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesAddRolesPostWithHttpInfoAsync(EFCrud.Model.Roles,System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="roles"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesDeleteEmpRoleDelete(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesDeleteEmpRoleDeleteWithHttpInfo(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesDeleteEmpRoleDeleteAsync(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesDeleteEmpRoleDeleteWithHttpInfoAsync(System.String,System.Nullable{EFCrud.Model.UserRoles},System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="name"> (optional)</param>
            <param name="role"> (optional)</param>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesShowEmployeeRolesGet(System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesShowEmployeeRolesGetWithHttpInfo(System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesShowEmployeeRolesGetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesShowEmployeeRolesGetWithHttpInfoAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesShowRolesGet(System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesShowRolesGetWithHttpInfo(System.Int32)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <returns>ApiResponse of Object(void)</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesShowRolesGetAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of void</returns>
        </member>
        <member name="M:EFCrud.Api.RolesApi.ApiRolesShowRolesGetWithHttpInfoAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
             
            </summary>
            <exception cref="T:EFCrud.Client.ApiException">Thrown when fails to make API call</exception>
            <param name="operationIndex">Index associated with the operation.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <returns>Task of ApiResponse</returns>
        </member>
        <member name="T:EFCrud.Client.CustomJsonCodec">
            <summary>
            Allows RestSharp to Serialize/Deserialize JSON using our custom logic, but only when ContentType is JSON.
            </summary>
        </member>
        <member name="M:EFCrud.Client.CustomJsonCodec.Serialize(System.Object)">
            <summary>
            Serialize the object into a JSON string.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <returns>A JSON string.</returns>
        </member>
        <member name="M:EFCrud.Client.CustomJsonCodec.Deserialize(RestSharp.RestResponse,System.Type)">
            <summary>
            Deserialize the JSON string into a proper object.
            </summary>
            <param name="response">The HTTP response.</param>
            <param name="type">Object type.</param>
            <returns>Object representation of the JSON string.</returns>
        </member>
        <member name="T:EFCrud.Client.ApiClient">
            <summary>
            Provides a default implementation of an Api client (both synchronous and asynchronous implementations),
            encapsulating general REST accessor use cases.
            </summary>
        </member>
        <member name="P:EFCrud.Client.ApiClient.SerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            These settings can be adjusted to accommodate custom serialization rules.
            </summary>
        </member>
        <member name="M:EFCrud.Client.ApiClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Client.ApiClient" />, defaulting to the global configurations' base url.
            </summary>
        </member>
        <member name="M:EFCrud.Client.ApiClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Client.ApiClient" />
            </summary>
            <param name="basePath">The target service's base path in URL format.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:EFCrud.Client.ApiClient.Method(EFCrud.Client.HttpMethod)">
            <summary>
            Constructs the RestSharp version of an http method
            </summary>
            <param name="method">Swagger Client Custom HttpMethod</param>
            <returns>RestSharp's HttpMethod instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:EFCrud.Client.ApiClient.NewRequest(EFCrud.Client.HttpMethod,System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Provides all logic for constructing a new RestSharp <see cref="T:RestSharp.RestRequest"/>.
            At this point, all information for querying the service is known. Here, it is simply
            mapped into the RestSharp request.
            </summary>
            <param name="method">The http verb.</param>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>[private] A new RestRequest instance.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:EFCrud.Client.ApiClient.GetAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP GET request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.PostAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP POST request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.PutAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP PUT request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.DeleteAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP DELETE request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.HeadAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP HEAD request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.OptionsAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP OPTION request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.PatchAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Make a HTTP PATCH request (async).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <param name="cancellationToken">Token that enables callers to cancel the request.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.Get``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP GET request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.Post``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP POST request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.Put``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP PUT request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.Delete``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP DELETE request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.Head``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP HEAD request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.Options``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP OPTION request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="M:EFCrud.Client.ApiClient.Patch``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Make a HTTP PATCH request (synchronous).
            </summary>
            <param name="path">The target path (or resource).</param>
            <param name="options">The additional request options.</param>
            <param name="configuration">A per-request configuration object. It is assumed that any merge with
            GlobalConfiguration has been done before calling this method.</param>
            <returns>A Task containing ApiResponse</returns>
        </member>
        <member name="T:EFCrud.Client.ApiException">
            <summary>
            API Exception
            </summary>
        </member>
        <member name="P:EFCrud.Client.ApiException.ErrorCode">
            <summary>
            Gets or sets the error code (HTTP status code)
            </summary>
            <value>The error code (HTTP status code).</value>
        </member>
        <member name="P:EFCrud.Client.ApiException.ErrorContent">
            <summary>
            Gets or sets the error content (body json object)
            </summary>
            <value>The error content (Http response body).</value>
        </member>
        <member name="P:EFCrud.Client.ApiException.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="M:EFCrud.Client.ApiException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Client.ApiException"/> class.
            </summary>
        </member>
        <member name="M:EFCrud.Client.ApiException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:EFCrud.Client.ApiException.#ctor(System.Int32,System.String,System.Object,EFCrud.Client.Multimap{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Client.ApiException"/> class.
            </summary>
            <param name="errorCode">HTTP status code.</param>
            <param name="message">Error message.</param>
            <param name="errorContent">Error content.</param>
            <param name="headers">HTTP Headers.</param>
        </member>
        <member name="T:EFCrud.Client.IApiResponse">
            <summary>
            Provides a non-generic contract for the ApiResponse wrapper.
            </summary>
        </member>
        <member name="P:EFCrud.Client.IApiResponse.ResponseType">
            <summary>
            The data type of <see cref="P:EFCrud.Client.IApiResponse.Content"/>
            </summary>
        </member>
        <member name="P:EFCrud.Client.IApiResponse.Content">
            <summary>
            The content of this response
            </summary>
        </member>
        <member name="P:EFCrud.Client.IApiResponse.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:EFCrud.Client.IApiResponse.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:EFCrud.Client.IApiResponse.ErrorText">
            <summary>
            Gets or sets any error text defined by the calling client.
            </summary>
        </member>
        <member name="P:EFCrud.Client.IApiResponse.Cookies">
            <summary>
            Gets or sets any cookies passed along on the response.
            </summary>
        </member>
        <member name="P:EFCrud.Client.IApiResponse.RawContent">
            <summary>
            The raw content of this response
            </summary>
        </member>
        <member name="T:EFCrud.Client.ApiResponse`1">
            <summary>
            API Response
            </summary>
        </member>
        <member name="P:EFCrud.Client.ApiResponse`1.StatusCode">
            <summary>
            Gets or sets the status code (HTTP status code)
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:EFCrud.Client.ApiResponse`1.Headers">
            <summary>
            Gets or sets the HTTP headers
            </summary>
            <value>HTTP headers</value>
        </member>
        <member name="P:EFCrud.Client.ApiResponse`1.Data">
            <summary>
            Gets or sets the data (parsed HTTP body)
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:EFCrud.Client.ApiResponse`1.ErrorText">
            <summary>
            Gets or sets any error text defined by the calling client.
            </summary>
        </member>
        <member name="P:EFCrud.Client.ApiResponse`1.Cookies">
            <summary>
            Gets or sets any cookies passed along on the response.
            </summary>
        </member>
        <member name="P:EFCrud.Client.ApiResponse`1.ResponseType">
            <summary>
            The content of this response
            </summary>
        </member>
        <member name="P:EFCrud.Client.ApiResponse`1.Content">
            <summary>
            The data type of <see cref="P:EFCrud.Client.ApiResponse`1.Content"/>
            </summary>
        </member>
        <member name="P:EFCrud.Client.ApiResponse`1.RawContent">
            <summary>
            The raw content
            </summary>
        </member>
        <member name="M:EFCrud.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,EFCrud.Client.Multimap{System.String,System.String},`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="headers">HTTP headers.</param>
            <param name="data">Data (parsed HTTP body)</param>
            <param name="rawContent">Raw content.</param>
        </member>
        <member name="M:EFCrud.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,EFCrud.Client.Multimap{System.String,System.String},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="headers">HTTP headers.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="M:EFCrud.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="data">Data (parsed HTTP body)</param>
            <param name="rawContent">Raw content.</param>
        </member>
        <member name="M:EFCrud.Client.ApiResponse`1.#ctor(System.Net.HttpStatusCode,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Client.ApiResponse`1" /> class.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="data">Data (parsed HTTP body)</param>
        </member>
        <member name="T:EFCrud.Client.ClientUtils">
            <summary>
            Utility functions providing some benefit to API client consumers.
            </summary>
        </member>
        <member name="M:EFCrud.Client.ClientUtils.SanitizeFilename(System.String)">
            <summary>
            Sanitize filename by removing the path
            </summary>
            <param name="filename">Filename</param>
            <returns>Filename</returns>
        </member>
        <member name="M:EFCrud.Client.ClientUtils.ParameterToMultiMap(System.String,System.String,System.Object)">
            <summary>
            Convert params to key/value pairs.
            Use collectionFormat to properly format lists and collections.
            </summary>
            <param name="collectionFormat">The swagger-supported collection format, one of: csv, tsv, ssv, pipes, multi</param>
            <param name="name">Key name.</param>
            <param name="value">Value object.</param>
            <returns>A multimap of keys with 1..n associated values.</returns>
        </member>
        <member name="M:EFCrud.Client.ClientUtils.ParameterToString(System.Object,EFCrud.Client.IReadableConfiguration)">
            <summary>
            If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
            If parameter is a list, join the list with ",".
            Otherwise just return the string.
            </summary>
            <param name="obj">The parameter (header, path, query, form).</param>
            <param name="configuration">An optional configuration instance, providing formatting options used in processing.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:EFCrud.Client.ClientUtils.Serialize(System.Object)">
            <summary>
            Serializes the given object when not null. Otherwise return null.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>Serialized string.</returns>
        </member>
        <member name="M:EFCrud.Client.ClientUtils.Base64Encode(System.String)">
            <summary>
            Encode string in base64 format.
            </summary>
            <param name="text">string to be encoded.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:EFCrud.Client.ClientUtils.ReadAsBytes(System.IO.Stream)">
            <summary>
            Convert stream to byte array
            </summary>
            <param name="inputStream">Input stream to be converted</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:EFCrud.Client.ClientUtils.SelectHeaderContentType(System.String[])">
            <summary>
            Select the Content-Type header's value from the given content-type array:
            if JSON type exists in the given array, use it;
            otherwise use the first one defined in 'consumes'
            </summary>
            <param name="contentTypes">The Content-Type array to select from.</param>
            <returns>The Content-Type header to use.</returns>
        </member>
        <member name="M:EFCrud.Client.ClientUtils.SelectHeaderAccept(System.String[])">
            <summary>
            Select the Accept header's value from the given accepts array:
            if JSON exists in the given array, use it;
            otherwise use all of them (joining into a string)
            </summary>
            <param name="accepts">The accepts array to select from.</param>
            <returns>The Accept header to use.</returns>
        </member>
        <member name="F:EFCrud.Client.ClientUtils.JsonRegex">
            <summary>
            Provides a case-insensitive check that a provided content type is a known JSON-like content type.
            </summary>
        </member>
        <member name="M:EFCrud.Client.ClientUtils.IsJsonMime(System.String)">
            <summary>
            Check if the given MIME is a JSON MIME.
            JSON MIME examples:
               application/json
               application/json; charset=UTF8
               APPLICATION/JSON
               application/vnd.company+json
            </summary>
            <param name="mime">MIME</param>
            <returns>Returns True if MIME type is json.</returns>
        </member>
        <member name="M:EFCrud.Client.ClientUtils.HasEnumMemberAttrValue(System.Object)">
            <summary>
            Is the Enum decorated with EnumMember Attribute
            </summary>
            <param name="enumVal"></param>
            <returns>true if found</returns>
        </member>
        <member name="M:EFCrud.Client.ClientUtils.GetEnumMemberAttrValue(System.Object)">
            <summary>
            Get the EnumMember value
            </summary>
            <param name="enumVal"></param>
            <returns>EnumMember value as string otherwise null</returns>
        </member>
        <member name="T:EFCrud.Client.Configuration">
            <summary>
            Represents a set of configuration settings
            </summary>
        </member>
        <member name="F:EFCrud.Client.Configuration.Version">
            <summary>
            Version of the package.
            </summary>
            <value>Version of the package.</value>
        </member>
        <member name="F:EFCrud.Client.Configuration.ISO8601_DATETIME_FORMAT">
            <summary>
            Identifier for ISO 8601 DateTime Format
            </summary>
            <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        </member>
        <member name="F:EFCrud.Client.Configuration.DefaultExceptionFactory">
            <summary>
            Default creation of exceptions for a given method name and response object
            </summary>
        </member>
        <member name="F:EFCrud.Client.Configuration._basePath">
            <summary>
            Defines the base path of the target API server.
            Example: http://localhost:3000/v1/
            </summary>
        </member>
        <member name="F:EFCrud.Client.Configuration._apiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            This is the key and value comprising the "secret" for accessing an API.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="F:EFCrud.Client.Configuration._apiKeyPrefix">
            <summary>
            Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            </summary>
            <value>The prefix of the API key.</value>
        </member>
        <member name="F:EFCrud.Client.Configuration._servers">
            <summary>
            Gets or sets the servers defined in the OpenAPI spec.
            </summary>
            <value>The servers</value>
        </member>
        <member name="F:EFCrud.Client.Configuration._operationServers">
            <summary>
            Gets or sets the operation servers defined in the OpenAPI spec.
            </summary>
            <value>The operation servers</value>
        </member>
        <member name="M:EFCrud.Client.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Client.Configuration" /> class
            </summary>
        </member>
        <member name="M:EFCrud.Client.Configuration.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Client.Configuration" /> class
            </summary>
        </member>
        <member name="P:EFCrud.Client.Configuration.BasePath">
            <summary>
            Gets or sets the base path for API access.
            </summary>
        </member>
        <member name="P:EFCrud.Client.Configuration.UseDefaultCredentials">
            <summary>
            Determine whether or not the "default credentials" (e.g. the user account under which the current process is running) will be sent along to the server. The default is false.
            </summary>
        </member>
        <member name="P:EFCrud.Client.Configuration.DefaultHeader">
            <summary>
            Gets or sets the default header.
            </summary>
        </member>
        <member name="P:EFCrud.Client.Configuration.DefaultHeaders">
            <summary>
            Gets or sets the default headers.
            </summary>
        </member>
        <member name="P:EFCrud.Client.Configuration.Timeout">
            <summary>
            Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
            </summary>
        </member>
        <member name="P:EFCrud.Client.Configuration.Proxy">
            <summary>
            Gets or sets the proxy
            </summary>
            <value>Proxy.</value>
        </member>
        <member name="P:EFCrud.Client.Configuration.UserAgent">
            <summary>
            Gets or sets the HTTP user agent.
            </summary>
            <value>Http user agent.</value>
        </member>
        <member name="P:EFCrud.Client.Configuration.Username">
            <summary>
            Gets or sets the username (HTTP basic authentication).
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:EFCrud.Client.Configuration.Password">
            <summary>
            Gets or sets the password (HTTP basic authentication).
            </summary>
            <value>The password.</value>
        </member>
        <member name="M:EFCrud.Client.Configuration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="P:EFCrud.Client.Configuration.ClientCertificates">
            <summary>
            Gets or sets certificate collection to be sent with requests.
            </summary>
            <value>X509 Certificate collection.</value>
        </member>
        <member name="P:EFCrud.Client.Configuration.AccessToken">
             <summary>
             Gets or sets the access token for OAuth2 authentication.
            
             This helper property simplifies code generation.
             </summary>
             <value>The access token.</value>
        </member>
        <member name="P:EFCrud.Client.Configuration.TempFolderPath">
            <summary>
            Gets or sets the temporary folder path to store the files downloaded from the server.
            </summary>
            <value>Folder path.</value>
        </member>
        <member name="P:EFCrud.Client.Configuration.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when serializing in the ApiClient
            By default, it's set to ISO 8601 - "o", for others see:
            https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
            and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
            No validation is done to ensure that the string you're providing is valid
            </summary>
            <value>The DateTimeFormat string</value>
        </member>
        <member name="P:EFCrud.Client.Configuration.ApiKeyPrefix">
             <summary>
             Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
            
             Whatever you set here will be prepended to the value defined in AddApiKey.
            
             An example invocation here might be:
             <example>
             ApiKeyPrefix["Authorization"] = "Bearer";
             </example>
             … where ApiKey["Authorization"] would then be used to set the value of your bearer token.
            
             <remarks>
             OAuth2 workflows should set tokens via AccessToken.
             </remarks>
             </summary>
             <value>The prefix of the API key.</value>
        </member>
        <member name="P:EFCrud.Client.Configuration.ApiKey">
            <summary>
            Gets or sets the API key based on the authentication name.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="P:EFCrud.Client.Configuration.Servers">
            <summary>
            Gets or sets the servers.
            </summary>
            <value>The servers.</value>
        </member>
        <member name="P:EFCrud.Client.Configuration.OperationServers">
            <summary>
            Gets or sets the operation servers.
            </summary>
            <value>The operation servers.</value>
        </member>
        <member name="M:EFCrud.Client.Configuration.GetServerUrl(System.Int32)">
            <summary>
            Returns URL based on server settings without providing values
            for the variables
            </summary>
            <param name="index">Array index of the server settings.</param>
            <return>The server URL.</return>
        </member>
        <member name="M:EFCrud.Client.Configuration.GetServerUrl(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns URL based on server settings.
            </summary>
            <param name="index">Array index of the server settings.</param>
            <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
            <return>The server URL.</return>
        </member>
        <member name="M:EFCrud.Client.Configuration.GetOperationServerUrl(System.String,System.Int32)">
            <summary>
            Returns URL based on operation server settings.
            </summary>
            <param name="operation">Operation associated with the request path.</param>
            <param name="index">Array index of the server settings.</param>
            <return>The operation server URL.</return>
        </member>
        <member name="M:EFCrud.Client.Configuration.GetOperationServerUrl(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns URL based on operation server settings.
            </summary>
            <param name="operation">Operation associated with the request path.</param>
            <param name="index">Array index of the server settings.</param>
            <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
            <return>The operation server URL.</return>
        </member>
        <member name="M:EFCrud.Client.Configuration.GetServerUrl(System.Collections.Generic.IList{System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}},System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns URL based on server settings.
            </summary>
            <param name="servers">Dictionary of server settings.</param>
            <param name="index">Array index of the server settings.</param>
            <param name="inputVariables">Dictionary of the variables and the corresponding values.</param>
            <return>The server URL.</return>
        </member>
        <member name="P:EFCrud.Client.Configuration.RemoteCertificateValidationCallback">
            <summary>
            Gets and Sets the RemoteCertificateValidationCallback
            </summary>
        </member>
        <member name="M:EFCrud.Client.Configuration.ToDebugReport">
            <summary>
            Returns a string with essential information for debugging.
            </summary>
        </member>
        <member name="M:EFCrud.Client.Configuration.AddApiKey(System.String,System.String)">
            <summary>
            Add Api Key Header.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
            <returns></returns>
        </member>
        <member name="M:EFCrud.Client.Configuration.AddApiKeyPrefix(System.String,System.String)">
            <summary>
            Sets the API key prefix.
            </summary>
            <param name="key">Api Key name.</param>
            <param name="value">Api Key value.</param>
        </member>
        <member name="M:EFCrud.Client.Configuration.MergeConfigurations(EFCrud.Client.IReadableConfiguration,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Merge configurations.
            </summary>
            <param name="first">First configuration.</param>
            <param name="second">Second configuration.</param>
            <return>Merged configuration.</return>
        </member>
        <member name="T:EFCrud.Client.ExceptionFactory">
            <summary>
            A delegate to ExceptionFactory method
            </summary>
            <param name="methodName">Method name</param>
            <param name="response">Response</param>
            <returns>Exceptions</returns>
        </member>
        <member name="T:EFCrud.Client.GlobalConfiguration">
            <summary>
            <see cref="T:EFCrud.Client.GlobalConfiguration"/> provides a compile-time extension point for globally configuring
            API Clients.
            </summary>
            <remarks>
            A customized implementation via partial class may reside in another file and may
            be excluded from automatic generation via a .openapi-generator-ignore file.
            </remarks>
        </member>
        <member name="M:EFCrud.Client.GlobalConfiguration.#ctor">
            <inheritdoc />
        </member>
        <member name="M:EFCrud.Client.GlobalConfiguration.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <inheritdoc />
        </member>
        <member name="P:EFCrud.Client.GlobalConfiguration.Instance">
            <summary>
            Gets or sets the default Configuration.
            </summary>
            <value>Configuration.</value>
        </member>
        <member name="T:EFCrud.Client.HttpMethod">
            <summary>
            Http methods supported by swagger
            </summary>
        </member>
        <member name="F:EFCrud.Client.HttpMethod.Get">
            <summary>HTTP GET request.</summary>
        </member>
        <member name="F:EFCrud.Client.HttpMethod.Post">
            <summary>HTTP POST request.</summary>
        </member>
        <member name="F:EFCrud.Client.HttpMethod.Put">
            <summary>HTTP PUT request.</summary>
        </member>
        <member name="F:EFCrud.Client.HttpMethod.Delete">
            <summary>HTTP DELETE request.</summary>
        </member>
        <member name="F:EFCrud.Client.HttpMethod.Head">
            <summary>HTTP HEAD request.</summary>
        </member>
        <member name="F:EFCrud.Client.HttpMethod.Options">
            <summary>HTTP OPTIONS request.</summary>
        </member>
        <member name="F:EFCrud.Client.HttpMethod.Patch">
            <summary>HTTP PATCH request.</summary>
        </member>
        <member name="T:EFCrud.Client.IApiAccessor">
            <summary>
            Represents configuration aspects required to interact with the API endpoints.
            </summary>
        </member>
        <member name="P:EFCrud.Client.IApiAccessor.Configuration">
            <summary>
            Gets or sets the configuration object
            </summary>
            <value>An instance of the Configuration</value>
        </member>
        <member name="M:EFCrud.Client.IApiAccessor.GetBasePath">
            <summary>
            Gets the base path of the API client.
            </summary>
            <value>The base path</value>
        </member>
        <member name="P:EFCrud.Client.IApiAccessor.ExceptionFactory">
            <summary>
            Provides a factory method hook for the creation of exceptions.
            </summary>
        </member>
        <member name="T:EFCrud.Client.IAsynchronousClient">
             <summary>
             Contract for Asynchronous RESTful API interactions.
            
             This interface allows consumers to provide a custom API accessor client.
             </summary>
        </member>
        <member name="M:EFCrud.Client.IAsynchronousClient.GetAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the GET http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:EFCrud.Client.IAsynchronousClient.PostAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the POST http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:EFCrud.Client.IAsynchronousClient.PutAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the PUT http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:EFCrud.Client.IAsynchronousClient.DeleteAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the DELETE http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:EFCrud.Client.IAsynchronousClient.HeadAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the HEAD http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:EFCrud.Client.IAsynchronousClient.OptionsAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the OPTIONS http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:EFCrud.Client.IAsynchronousClient.PatchAsync``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration,System.Threading.CancellationToken)">
            <summary>
            Executes a non-blocking call to some <paramref name="path"/> using the PATCH http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>A task eventually representing the response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="T:EFCrud.Client.IReadableConfiguration">
            <summary>
            Represents a readable-only configuration contract.
            </summary>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.AccessToken">
            <summary>
            Gets the access token.
            </summary>
            <value>Access token.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.ApiKey">
            <summary>
            Gets the API key.
            </summary>
            <value>API key.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.ApiKeyPrefix">
            <summary>
            Gets the API key prefix.
            </summary>
            <value>API key prefix.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.BasePath">
            <summary>
            Gets the base path.
            </summary>
            <value>Base path.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.DateTimeFormat">
            <summary>
            Gets the date time format.
            </summary>
            <value>Date time format.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.DefaultHeader">
            <summary>
            Gets the default header.
            </summary>
            <value>Default header.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.DefaultHeaders">
            <summary>
            Gets the default headers.
            </summary>
            <value>Default headers.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.TempFolderPath">
            <summary>
            Gets the temp folder path.
            </summary>
            <value>Temp folder path.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.Timeout">
            <summary>
            Gets the HTTP connection timeout (in milliseconds)
            </summary>
            <value>HTTP connection timeout.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.Proxy">
            <summary>
            Gets the proxy.
            </summary>
            <value>Proxy.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
            <value>User agent.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.Username">
            <summary>
            Gets the username.
            </summary>
            <value>Username.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.Password">
            <summary>
            Gets the password.
            </summary>
            <value>Password.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.UseDefaultCredentials">
            <summary>
            Determine whether or not the "default credentials" (e.g. the user account under which the current process is running) will be sent along to the server. The default is false.
            </summary>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.OperationServers">
            <summary>
            Get the servers associated with the operation.
            </summary>
            <value>Operation servers.</value>
        </member>
        <member name="M:EFCrud.Client.IReadableConfiguration.GetApiKeyWithPrefix(System.String)">
            <summary>
            Gets the API key with prefix.
            </summary>
            <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
            <returns>API key with prefix.</returns>
        </member>
        <member name="M:EFCrud.Client.IReadableConfiguration.GetOperationServerUrl(System.String,System.Int32)">
            <summary>
            Gets the Operation server url at the provided index.
            </summary>
            <param name="operation">Operation server name.</param>
            <param name="index">Index of the operation server settings.</param>
            <returns></returns>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.ClientCertificates">
            <summary>
            Gets certificate collection to be sent with requests.
            </summary>
            <value>X509 Certificate collection.</value>
        </member>
        <member name="P:EFCrud.Client.IReadableConfiguration.RemoteCertificateValidationCallback">
            <summary>
            Callback function for handling the validation of remote certificates. Useful for certificate pinning and
            overriding certificate errors in the scope of a request.
            </summary>
        </member>
        <member name="T:EFCrud.Client.ISynchronousClient">
             <summary>
             Contract for Synchronous RESTful API interactions.
            
             This interface allows consumers to provide a custom API accessor client.
             </summary>
        </member>
        <member name="M:EFCrud.Client.ISynchronousClient.Get``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the GET http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:EFCrud.Client.ISynchronousClient.Post``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the POST http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:EFCrud.Client.ISynchronousClient.Put``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the PUT http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:EFCrud.Client.ISynchronousClient.Delete``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the DELETE http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:EFCrud.Client.ISynchronousClient.Head``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the HEAD http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:EFCrud.Client.ISynchronousClient.Options``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the OPTIONS http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="M:EFCrud.Client.ISynchronousClient.Patch``1(System.String,EFCrud.Client.RequestOptions,EFCrud.Client.IReadableConfiguration)">
            <summary>
            Executes a blocking call to some <paramref name="path"/> using the PATCH http verb.
            </summary>
            <param name="path">The relative path to invoke.</param>
            <param name="options">The request parameters to pass along to the client.</param>
            <param name="configuration">Per-request configurable settings.</param>
            <typeparam name="T">The return type.</typeparam>
            <returns>The response data, decorated with <see cref="T:EFCrud.Client.ApiResponse`1"/></returns>
        </member>
        <member name="T:EFCrud.Client.Multimap`2">
            <summary>
            A dictionary in which one key has many associated values.
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value associated with the key.</typeparam>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.#ctor">
            <summary>
            Empty Constructor.
            </summary>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor with comparer.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.GetEnumerator">
            <summary>
            To get the enumerator.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            To get the enumerator.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Add values to Multimap
            </summary>
            <param name="item">Key value pair</param>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.Add(EFCrud.Client.Multimap{`0,`1})">
            <summary>
            Add Multimap to Multimap
            </summary>
            <param name="multimap">Multimap</param>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.Clear">
            <summary>
            Clear Multimap
            </summary>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Determines whether Multimap contains the specified item.
            </summary>
            <param name="item">Key value pair</param>
            <exception cref="T:System.NotImplementedException">Method needs to be implemented</exception>
            <returns>true if the Multimap contains the item; otherwise, false.</returns>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)">
            <summary>
             Copy items of the Multimap to an array,
                starting at a particular array index.
            </summary>
            <param name="array">The array that is the destination of the items copied
                from Multimap. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.NotImplementedException">Method needs to be implemented</exception>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Removes the specified item from the Multimap.
            </summary>
            <param name="item">Key value pair</param>
            <returns>true if the item is successfully removed; otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException">Method needs to be implemented</exception>
        </member>
        <member name="P:EFCrud.Client.Multimap`2.Count">
            <summary>
            Gets the number of items contained in the Multimap.
            </summary>
        </member>
        <member name="P:EFCrud.Client.Multimap`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the Multimap is read-only.
            </summary>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Adds an item with the provided key and value to the Multimap.
            </summary>
            <param name="key">The object to use as the key of the item to add.</param>
            <param name="value">The object to use as the value of the item to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when couldn't add the value to Multimap.</exception>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.ContainsKey(`0)">
            <summary>
            Determines whether the Multimap contains an item with the specified key.
            </summary>
            <param name="key">The key to locate in the Multimap.</param>
            <returns>true if the Multimap contains an item with
                the key; otherwise, false.</returns>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.Remove(`0)">
            <summary>
            Removes item with the specified key from the Multimap.
            </summary>
            <param name="key">The key to locate in the Multimap.</param>
            <returns>true if the item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.TryGetValue(`0,System.Collections.Generic.IList{`1}@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the
                key is found; otherwise, the default value for the type of the value parameter.
                This parameter is passed uninitialized.</param>
            <returns> true if the object that implements Multimap contains
                an item with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:EFCrud.Client.Multimap`2.Item(`0)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
            <param name="key">The key of the item to get or set.</param>
            <returns>The value of the specified key.</returns>
        </member>
        <member name="P:EFCrud.Client.Multimap`2.Keys">
            <summary>
            Gets a System.Collections.Generic.ICollection containing the keys of the Multimap.
            </summary>
        </member>
        <member name="P:EFCrud.Client.Multimap`2.Values">
            <summary>
            Gets a System.Collections.Generic.ICollection containing the values of the Multimap.
            </summary>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.CopyTo(System.Array,System.Int32)">
            <summary>
             Copy the items of the Multimap to an System.Array,
                starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the items copied
                from Multimap. The System.Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.Add(`0,`1)">
            <summary>
            Adds an item with the provided key and value to the Multimap.
            </summary>
            <param name="key">The object to use as the key of the item to add.</param>
            <param name="value">The object to use as the value of the item to add.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when couldn't add value to Multimap.</exception>
        </member>
        <member name="M:EFCrud.Client.Multimap`2.TryRemove(`0,System.Collections.Generic.IList{`1}@)">
            Helper method to encapsulate generator differences between dictionary types.
        </member>
        <member name="M:EFCrud.Client.Multimap`2.TryAdd(`0,System.Collections.Generic.IList{`1})">
            Helper method to encapsulate generator differences between dictionary types.
        </member>
        <member name="T:EFCrud.Client.OpenAPIDateConverter">
            <summary>
            Formatter for 'date' openapi formats ss defined by full-date - RFC3339
            see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types
            </summary>
        </member>
        <member name="M:EFCrud.Client.OpenAPIDateConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Client.OpenAPIDateConverter" /> class.
            </summary>
        </member>
        <member name="T:EFCrud.Client.RequestOptions">
            <summary>
            A container for generalized request inputs. This type allows consumers to extend the request functionality
            by abstracting away from the default (built-in) request framework (e.g. RestSharp).
            </summary>
        </member>
        <member name="P:EFCrud.Client.RequestOptions.PathParameters">
            <summary>
            Parameters to be bound to path parts of the Request's URL
            </summary>
        </member>
        <member name="P:EFCrud.Client.RequestOptions.QueryParameters">
            <summary>
            Query parameters to be applied to the request.
            Keys may have 1 or more values associated.
            </summary>
        </member>
        <member name="P:EFCrud.Client.RequestOptions.HeaderParameters">
            <summary>
            Header parameters to be applied to the request.
            Keys may have 1 or more values associated.
            </summary>
        </member>
        <member name="P:EFCrud.Client.RequestOptions.FormParameters">
            <summary>
            Form parameters to be sent along with the request.
            </summary>
        </member>
        <member name="P:EFCrud.Client.RequestOptions.FileParameters">
            <summary>
            File parameters to be sent along with the request.
            </summary>
        </member>
        <member name="P:EFCrud.Client.RequestOptions.Cookies">
            <summary>
            Cookies to be sent along with the request.
            </summary>
        </member>
        <member name="P:EFCrud.Client.RequestOptions.Operation">
            <summary>
            Operation associated with the request path.
            </summary>
        </member>
        <member name="P:EFCrud.Client.RequestOptions.OperationIndex">
            <summary>
            Index associated with the operation.
            </summary>
        </member>
        <member name="P:EFCrud.Client.RequestOptions.Data">
            <summary>
            Any data associated with a request body.
            </summary>
        </member>
        <member name="M:EFCrud.Client.RequestOptions.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:EFCrud.Client.RequestOptions"/>
            </summary>
        </member>
        <member name="T:EFCrud.Client.RetryConfiguration">
            <summary>
            Configuration class to set the polly retry policies to be applied to the requests.
            </summary>
        </member>
        <member name="P:EFCrud.Client.RetryConfiguration.RetryPolicy">
            <summary>
            Retry policy
            </summary>
        </member>
        <member name="P:EFCrud.Client.RetryConfiguration.AsyncRetryPolicy">
            <summary>
            Async retry policy
            </summary>
        </member>
        <member name="T:EFCrud.Model.AbstractOpenAPISchema">
            <summary>
             Abstract base class for oneOf, anyOf schemas in the OpenAPI specification
            </summary>
        </member>
        <member name="F:EFCrud.Model.AbstractOpenAPISchema.SerializerSettings">
            <summary>
             Custom JSON serializer
            </summary>
        </member>
        <member name="F:EFCrud.Model.AbstractOpenAPISchema.AdditionalPropertiesSerializerSettings">
            <summary>
             Custom JSON serializer for objects with additional properties
            </summary>
        </member>
        <member name="P:EFCrud.Model.AbstractOpenAPISchema.ActualInstance">
            <summary>
            Gets or Sets the actual instance
            </summary>
        </member>
        <member name="P:EFCrud.Model.AbstractOpenAPISchema.IsNullable">
            <summary>
            Gets or Sets IsNullable to indicate whether the instance is nullable
            </summary>
        </member>
        <member name="P:EFCrud.Model.AbstractOpenAPISchema.SchemaType">
            <summary>
            Gets or Sets the schema type, which can be either `oneOf` or `anyOf`
            </summary>
        </member>
        <member name="M:EFCrud.Model.AbstractOpenAPISchema.ToJson">
            <summary>
            Converts the instance into JSON string.
            </summary>
        </member>
        <member name="T:EFCrud.Model.Employee">
            <summary>
            Employee
            </summary>
        </member>
        <member name="M:EFCrud.Model.Employee.#ctor(System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.DateTime,System.DateTime,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Model.Employee" /> class.
            </summary>
            <param name="employeeId">employeeId.</param>
            <param name="name">name.</param>
            <param name="age">age.</param>
            <param name="department">department.</param>
            <param name="experience">experience.</param>
            <param name="bloodGroup">bloodGroup.</param>
            <param name="fatherName">fatherName.</param>
            <param name="isDeleted">isDeleted.</param>
            <param name="isActive">isActive.</param>
            <param name="dateOfCreated">dateOfCreated.</param>
            <param name="dateOfUpdated">dateOfUpdated.</param>
            <param name="roles">roles.</param>
            <param name="isSupervisor">isSupervisor.</param>
            <param name="isManager">isManager.</param>
        </member>
        <member name="P:EFCrud.Model.Employee.EmployeeId">
            <summary>
            Gets or Sets EmployeeId
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.Name">
            <summary>
            Gets or Sets Name
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.Age">
            <summary>
            Gets or Sets Age
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.Department">
            <summary>
            Gets or Sets Department
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.Experience">
            <summary>
            Gets or Sets Experience
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.BloodGroup">
            <summary>
            Gets or Sets BloodGroup
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.FatherName">
            <summary>
            Gets or Sets FatherName
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.IsDeleted">
            <summary>
            Gets or Sets IsDeleted
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.IsActive">
            <summary>
            Gets or Sets IsActive
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.DateOfCreated">
            <summary>
            Gets or Sets DateOfCreated
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.DateOfUpdated">
            <summary>
            Gets or Sets DateOfUpdated
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.Roles">
            <summary>
            Gets or Sets Roles
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.IsSupervisor">
            <summary>
            Gets or Sets IsSupervisor
            </summary>
        </member>
        <member name="P:EFCrud.Model.Employee.IsManager">
            <summary>
            Gets or Sets IsManager
            </summary>
        </member>
        <member name="M:EFCrud.Model.Employee.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:EFCrud.Model.Employee.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:EFCrud.Model.Employee.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:EFCrud.Model.Roles">
            <summary>
            Roles
            </summary>
        </member>
        <member name="M:EFCrud.Model.Roles.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Model.Roles" /> class.
            </summary>
            <param name="roleId">roleId.</param>
            <param name="roleName">roleName.</param>
        </member>
        <member name="P:EFCrud.Model.Roles.RoleId">
            <summary>
            Gets or Sets RoleId
            </summary>
        </member>
        <member name="P:EFCrud.Model.Roles.RoleName">
            <summary>
            Gets or Sets RoleName
            </summary>
        </member>
        <member name="M:EFCrud.Model.Roles.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:EFCrud.Model.Roles.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:EFCrud.Model.Roles.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:EFCrud.Model.User">
            <summary>
            User
            </summary>
        </member>
        <member name="M:EFCrud.Model.User.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Model.User" /> class.
            </summary>
            <param name="userName">userName.</param>
            <param name="passwordHash">passwordHash.</param>
            <param name="role">role.</param>
        </member>
        <member name="P:EFCrud.Model.User.UserName">
            <summary>
            Gets or Sets UserName
            </summary>
        </member>
        <member name="P:EFCrud.Model.User.PasswordHash">
            <summary>
            Gets or Sets PasswordHash
            </summary>
        </member>
        <member name="P:EFCrud.Model.User.Role">
            <summary>
            Gets or Sets Role
            </summary>
        </member>
        <member name="M:EFCrud.Model.User.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:EFCrud.Model.User.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:EFCrud.Model.User.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:EFCrud.Model.Userdto">
            <summary>
            Userdto
            </summary>
        </member>
        <member name="M:EFCrud.Model.Userdto.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EFCrud.Model.Userdto" /> class.
            </summary>
            <param name="username">username.</param>
            <param name="password">password.</param>
        </member>
        <member name="P:EFCrud.Model.Userdto.Username">
            <summary>
            Gets or Sets Username
            </summary>
        </member>
        <member name="P:EFCrud.Model.Userdto.Password">
            <summary>
            Gets or Sets Password
            </summary>
        </member>
        <member name="M:EFCrud.Model.Userdto.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:EFCrud.Model.Userdto.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:EFCrud.Model.Userdto.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:EFCrud.Model.UserRoles">
            <summary>
            Defines UserRoles
            </summary>
        </member>
        <member name="F:EFCrud.Model.UserRoles.NUMBER_1">
            <summary>
            Enum NUMBER_1 for value: 1
            </summary>
        </member>
        <member name="F:EFCrud.Model.UserRoles.NUMBER_2">
            <summary>
            Enum NUMBER_2 for value: 2
            </summary>
        </member>
        <member name="F:EFCrud.Model.UserRoles.NUMBER_3">
            <summary>
            Enum NUMBER_3 for value: 3
            </summary>
        </member>
        <member name="F:EFCrud.Model.UserRoles.NUMBER_4">
            <summary>
            Enum NUMBER_4 for value: 4
            </summary>
        </member>
    </members>
</doc>
