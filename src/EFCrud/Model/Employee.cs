/*
 * EmployeeEFCrud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EFCrud.Client.OpenAPIDateConverter;

namespace EFCrud.Model
{
    /// <summary>
    /// Employee
    /// </summary>
    [DataContract(Name = "Employee")]
    public partial class Employee : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee" /> class.
        /// </summary>
        /// <param name="employeeId">employeeId.</param>
        /// <param name="name">name.</param>
        /// <param name="age">age.</param>
        /// <param name="department">department.</param>
        /// <param name="experience">experience.</param>
        /// <param name="bloodGroup">bloodGroup.</param>
        /// <param name="fatherName">fatherName.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="dateOfCreated">dateOfCreated.</param>
        /// <param name="dateOfUpdated">dateOfUpdated.</param>
        /// <param name="roles">roles.</param>
        /// <param name="isSupervisor">isSupervisor.</param>
        /// <param name="isManager">isManager.</param>
        public Employee(int employeeId = default(int), string name = default(string), int age = default(int), string department = default(string), int experience = default(int), string bloodGroup = default(string), string fatherName = default(string), bool isDeleted = default(bool), bool isActive = default(bool), DateTime dateOfCreated = default(DateTime), DateTime dateOfUpdated = default(DateTime), string roles = default(string), bool isSupervisor = default(bool), bool isManager = default(bool))
        {
            this.EmployeeId = employeeId;
            this.Name = name;
            this.Age = age;
            this.Department = department;
            this.Experience = experience;
            this.BloodGroup = bloodGroup;
            this.FatherName = fatherName;
            this.IsDeleted = isDeleted;
            this.IsActive = isActive;
            this.DateOfCreated = dateOfCreated;
            this.DateOfUpdated = dateOfUpdated;
            this.Roles = roles;
            this.IsSupervisor = isSupervisor;
            this.IsManager = isManager;
        }

        /// <summary>
        /// Gets or Sets EmployeeId
        /// </summary>
        [DataMember(Name = "employeeId", EmitDefaultValue = false)]
        public int EmployeeId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name = "age", EmitDefaultValue = false)]
        public int Age { get; set; }

        /// <summary>
        /// Gets or Sets Department
        /// </summary>
        [DataMember(Name = "department", EmitDefaultValue = true)]
        public string Department { get; set; }

        /// <summary>
        /// Gets or Sets Experience
        /// </summary>
        [DataMember(Name = "experience", EmitDefaultValue = false)]
        public int Experience { get; set; }

        /// <summary>
        /// Gets or Sets BloodGroup
        /// </summary>
        [DataMember(Name = "bloodGroup", EmitDefaultValue = true)]
        public string BloodGroup { get; set; }

        /// <summary>
        /// Gets or Sets FatherName
        /// </summary>
        [DataMember(Name = "fatherName", EmitDefaultValue = true)]
        public string FatherName { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets DateOfCreated
        /// </summary>
        [DataMember(Name = "dateOfCreated", EmitDefaultValue = false)]
        public DateTime DateOfCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateOfUpdated
        /// </summary>
        [DataMember(Name = "dateOfUpdated", EmitDefaultValue = false)]
        public DateTime DateOfUpdated { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name = "roles", EmitDefaultValue = true)]
        public string Roles { get; set; }

        /// <summary>
        /// Gets or Sets IsSupervisor
        /// </summary>
        [DataMember(Name = "isSupervisor", EmitDefaultValue = true)]
        public bool IsSupervisor { get; set; }

        /// <summary>
        /// Gets or Sets IsManager
        /// </summary>
        [DataMember(Name = "isManager", EmitDefaultValue = true)]
        public bool IsManager { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Employee {\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Experience: ").Append(Experience).Append("\n");
            sb.Append("  BloodGroup: ").Append(BloodGroup).Append("\n");
            sb.Append("  FatherName: ").Append(FatherName).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  DateOfCreated: ").Append(DateOfCreated).Append("\n");
            sb.Append("  DateOfUpdated: ").Append(DateOfUpdated).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  IsSupervisor: ").Append(IsSupervisor).Append("\n");
            sb.Append("  IsManager: ").Append(IsManager).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
